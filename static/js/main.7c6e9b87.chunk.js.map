{"version":3,"sources":["utils.js","Pokemon.js","Pokedex.js","App.js","serviceWorker.js","index.js"],"names":["toFirstCharUppercase","name","charAt","toUpperCase","slice","Pokemon","props","match","history","pokemonId","params","useState","undefined","pokemon","setPokemon","useEffect","axios","get","then","response","data","catch","error","style","textAlign","CircularProgress","id","species","height","weight","types","sprites","fullImageUrl","front_default","Typography","variant","src","width","href","url","map","typeInfo","type","key","generatePokemonJSX","Button","onClick","push","useStyles","makeStyles","theme","pokedexContainer","paddingTop","paddingLeft","paddingRight","cardMedia","margin","cardContent","searchContainer","display","backgroundColor","fade","palette","common","white","marginTop","marginBottom","searchIcon","alignSelf","searchInput","Pokedex","classes","pokemonData","setPokemonData","filter","setFilter","results","newPokemonData","forEach","index","sprite","AppBar","position","Toolbar","className","TextField","onChange","e","target","value","Grid","container","spacing","Object","keys","includes","item","xs","sm","Card","cursor","CardMedia","image","CardContent","getPokemonCard","App","exact","path","render","Boolean","window","location","hostname","createBrowserHistory","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.7c6e9b87.chunk.js","sourcesContent":["export const toFirstCharUppercase = (name) =>\r\n  name.charAt(0).toUpperCase() + name.slice(1);","import { Button, CircularProgress, Typography } from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { toFirstCharUppercase } from \"./utils\";\r\n\r\nconst Pokemon = (props) => {\r\n  const { match, history } = props;\r\n  const { params } = match;\r\n  const { pokemonId } = params;\r\n  const [pokemon, setPokemon] = useState(undefined);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(`https://pokeapi.co/api/v2/pokemon/${pokemonId}/`)\r\n      .then(function (response) {\r\n        const { data } = response;\r\n        setPokemon(data);\r\n      })\r\n      .catch(function (error) {\r\n        setPokemon(false);\r\n      });\r\n  }, [pokemonId]);\r\n  const generatePokemonJSX = () => {\r\n    const { name, id, species, height, weight, types, sprites } = pokemon;\r\n    const fullImageUrl = `https://pokeres.bastionbot.org/images/pokemon/${id}.png`;\r\n    const { front_default } = sprites;\r\n    return (\r\n      <>\r\n        <Typography variant=\"h1\">\r\n          {`${id}.`} {toFirstCharUppercase(name)}\r\n          <img src={front_default} />\r\n        </Typography>\r\n        <img style={{ width: \"300px\", height: \"300px\" }} src={fullImageUrl} />\r\n        <Typography variant=\"h3\">Pokemon Info</Typography>\r\n        <Typography>\r\n          {\"Species: \"}\r\n          <Link href={species.url}>{species.name}</Link>\r\n        </Typography>\r\n        <Typography>Height: {height}</Typography>\r\n        <Typography>Weight: {weight}</Typography>\r\n        <Typography variant=\"h6\">Types:</Typography>\r\n        {types.map((typeInfo) => {\r\n          const { type } = typeInfo;\r\n          const { name } = type;\r\n          return <Typography key={name}>{`${name}`}</Typography>;\r\n        })}\r\n      </>\r\n    );\r\n  };\r\n  return (\r\n    <div style={{ textAlign: \"left\" }}>\r\n      {pokemon === undefined && <CircularProgress />}\r\n      {pokemon !== undefined && pokemon && generatePokemonJSX()}\r\n      {pokemon === false && <Typography> Pokemon not found </Typography>}\r\n      {pokemon !== undefined && (\r\n        <Button variant=\"contained\" onClick={() => history.push(\"/\")}>\r\n          back to pokedex\r\n        </Button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Pokemon;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  AppBar,\r\n  Card,\r\n  CardContent,\r\n  CardMedia,\r\n  CircularProgress,\r\n  Grid,\r\n  Toolbar,\r\n  Typography,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport { toFirstCharUppercase } from \"./utils\";\r\nimport axios from \"axios\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport { fade, makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  pokedexContainer: {\r\n    paddingTop: \"20px\",\r\n    paddingLeft: \"50px\",\r\n    paddingRight: \"50px\",\r\n  },\r\n  cardMedia: {\r\n    margin: \"auto\",\r\n  },\r\n  cardContent: {\r\n    textAlign: \"center\",\r\n  },\r\n  searchContainer: {\r\n    display: \"flex\",\r\n    backgroundColor: fade(theme.palette.common.white, 0.15),\r\n    paddingLeft: \"20px\",\r\n    paddingRight: \"20px\",\r\n    marginTop: \"5px\",\r\n    marginBottom: \"5px\",\r\n  },\r\n  searchIcon: {\r\n    alignSelf: \"flex-end\",\r\n    marginBottom: \"5px\",\r\n  },\r\n  searchInput: {\r\n    width: \"200px\",\r\n    margin: \"5px\",\r\n  },\r\n}));\r\n\r\nconst Pokedex = (props) => {\r\n  const { history } = props;\r\n  const classes = useStyles();\r\n  const [pokemonData, setPokemonData] = useState({});\r\n  const [filter, setFilter] = useState(\"\");\r\n\r\n  const handleSearchChange = (e) => {\r\n    setFilter(e.target.value);\r\n  };\r\n  useEffect(() => {\r\n    axios\r\n      .get(`https://pokeapi.co/api/v2/pokemon?limit=807`)\r\n      .then(function (response) {\r\n        const { data } = response;\r\n        const { results } = data;\r\n        const newPokemonData = {};\r\n        results.forEach((pokemon, index) => {\r\n          newPokemonData[index + 1] = {\r\n            id: index + 1,\r\n            name: pokemon.name,\r\n            sprite: `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${\r\n              index + 1\r\n            }.png`,\r\n          };\r\n        });\r\n        setPokemonData(newPokemonData);\r\n      });\r\n  }, []);\r\n\r\n  const getPokemonCard = (pokemonId) => {\r\n    const { id, name } = pokemonData[`${pokemonId}`];\r\n    const sprite = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${id}.png`;\r\n    return (\r\n      <Grid item xs={12} sm={4} key={pokemonId}>\r\n        <Card\r\n          style={{ cursor: \"pointer\" }}\r\n          onClick={() => history.push(`/${pokemonId}`)}\r\n        >\r\n          <CardMedia\r\n            className={classes.cardMedia}\r\n            image={sprite}\r\n            style={{ width: \"130px\", height: \"130px\" }}\r\n          />\r\n          <CardContent className={classes.cardContent}>\r\n            <Typography>{`${id}. ${toFirstCharUppercase(name)}`}</Typography>\r\n          </CardContent>\r\n        </Card>\r\n      </Grid>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <div className={classes.searchContainer}>\r\n            <SearchIcon className={classes.searchIcon} />\r\n            <TextField\r\n              onChange={handleSearchChange}\r\n              className={classes.searchInput}\r\n            />\r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n      {pokemonData ? (\r\n        <Grid container spacing={2} className={classes.pokedexContainer}>\r\n          {Object.keys(pokemonData).map(\r\n            (pokemonId) =>\r\n              pokemonData[pokemonId].name.includes(filter) &&\r\n              getPokemonCard(pokemonId)\r\n          )}\r\n        </Grid>\r\n      ) : (\r\n        <CircularProgress />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Pokedex;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Pokemon from \"./Pokemon\";\nimport Pokedex from \"./Pokedex\";\nimport { Route, Switch } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route exact path=\"/\" render={(props) => <Pokedex {...props}/>}/>\n        <Route\n        exact \n        path=\"/:pokemonId\"\n        render={(props => <Pokemon {...props}/>)}\n        />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Router } from \"react-router-dom\";\nimport { createBrowserHistory } from \"history\";\n\nconst history = createBrowserHistory();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router history={history}>\n        <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}